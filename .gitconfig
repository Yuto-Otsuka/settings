[color]
  ui = true
[core]
  editor = vim
  pager = lv -c
[user]
  name = Yuto Otsuka
  email = hogehoge@example.com
[alias]
  st = status
  sb = status -sb
  sh = show
  nr = name-rev            # commit hashを引数にすることでそのcommitがどこのブランチに属しているかが分かる
  so = remote show origin
  ft = fetch
  fp = fetch --prune       # 既に削除したリモートブランチを一覧から削除(git br -aで出てこなくなる)
  up = pull --rebase       # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  ad = add
  ci = commit -a           # modifiedなファイルを全てstageへ
  cm = commit              # commitのコメントを受け付ける
  cam = commit -a --amend  # 直前のcommitを修正
  co = checkout
  # branch関連
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # remote関連
  rv = remote -v           # remote先を詳細表示
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --graph --date-order --all --color --pretty=format:'%Cblue%h %Cgreen%ci %Cred%cn %Cblue%m %Creset%s %Cred%d'          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  # submodule関連
  su = submodule update
  # daily関連
  drs = daily release sync
  dpull = daily pull
  # stash関連
  slist = stash list        # stash一覧確認
  spop = stash pop          # stashを戻す       使い方:git spop stash@{1}
  sdrop = stash drop        # stashを消す       使い方:git sdrop stash@{1}
  ssp = stash show -p       # stash詳細確認     使い方:git ssp stash@{1}
